# -*- coding: utf-8 -*-
"""shadow fox intership basic 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8CQDXmvQpd6rOhgyawf59EicpWi3Kch
"""

pip install torch torchvision torchaudio

pip install transformers

pip install pandas

pip install torch torchvision transformers

import difflib
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Load GPT-2 model and tokenizer
print("Loading GPT-2 model and tokenizer...")
model = GPT2LMHeadModel.from_pretrained("gpt2")
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")


def predict_next_words(context, max_length=10, num_suggestions=3):
    """
    Predict the next possible words using the GPT-2 model.

    Parameters:
    - context: The input text to provide context.
    - max_length: The maximum number of tokens to generate.
    - num_suggestions: The number of next-word suggestions to return.

    Returns:
    - List of next-word suggestions.
    """
    inputs = tokenizer.encode(context, return_tensors="pt")

    # Use sampling for diverse next-word suggestions
    outputs = model.generate(
        inputs,
        max_length=len(inputs[0]) + max_length,
        num_return_sequences=num_suggestions,
        do_sample=True,  # Enables sampling for diverse suggestions
        top_k=50,  # Limits sampling to top 50 tokens
        temperature=0.7,  # Controls randomness
    )

    # Decode and clean up suggestions
    suggestions = []
    for output in outputs:
        decoded = tokenizer.decode(output, skip_special_tokens=True)
        # Extract only the next word(s) generated
        suggestion = decoded[len(context):].strip().split(" ")[0]
        suggestions.append(suggestion)

    return suggestions


def suggest_similar_words(word, vocabulary, max_suggestions=3):
    """
    Suggest similar words for a given input word using difflib.

    Parameters:
    - word: The word for which suggestions are needed.
    - vocabulary: The list of valid words to check against.
    - max_suggestions: Maximum number of suggestions to return.

    Returns:
    - List of similar word suggestions.
    """
    return difflib.get_close_matches(word, vocabulary, n=max_suggestions, cutoff=0.7)


def autocorrect(input_text, vocabulary):
    """
    Autocorrect the input text by finding the closest match in the vocabulary.

    Parameters:
    - input_text: The text input by the user.
    - vocabulary: The list of valid words to check against.

    Returns:
    - Autocorrected text as a string.
    """
    words = input_text.split()
    corrected_words = []
    for word in words:
        matches = suggest_similar_words(word, vocabulary, max_suggestions=1)
        corrected_words.append(matches[0] if matches else word)
    return " ".join(corrected_words)


def autocorrect_keyboard(input_text, vocabulary, max_suggestions=3):
    """
    Combine autocorrect, per-word suggestions, and next-word prediction.

    Parameters:
    - input_text: The user's input text.
    - vocabulary: List of valid words for autocorrect.
    - max_suggestions: Number of suggestions to generate for each word.

    Returns:
    - A tuple containing:
        - Autocorrected text
        - Per-word suggestions
        - List of next-word suggestions
    """
    # Autocorrect the input text
    corrected_text = autocorrect(input_text, vocabulary)

    # Generate per-word suggestions
    words = input_text.split()
    word_suggestions = {word: suggest_similar_words(word, vocabulary, max_suggestions) for word in words}

    # Generate next-word suggestions using GPT-2
    next_word_suggestions = predict_next_words(corrected_text, num_suggestions=max_suggestions)

    return corrected_text, word_suggestions, next_word_suggestions


if __name__ == "__main__":
    # Sample vocabulary for autocorrect and suggestions
    vocabulary = ["hello", "world", "python", "keyboard", "suggestion", "autocorrect", "system", "text", "predict", "love", "programming", "in"]

    # User input
    print("Type a sentence (e.g., 'i lov programming in'): ")
    user_input = input("Your Input: ")

    # Get autocorrected text, word suggestions, and next-word suggestions
    corrected_text, word_suggestions, next_word_suggestions = autocorrect_keyboard(user_input, vocabulary)

    # Display the results
    print("\nCorrected Text:", corrected_text)
    print("\nSuggestions for Each Word:")
    for word, suggestions in word_suggestions.items():
        print(f"  '{word}': {suggestions}")
    print("\nNext-Word Suggestions:", next_word_suggestions)